@page "/scan"
@using Microsoft.JSInterop
@using greenscan.Data
@using System.Net.Http.Json 
@using System.Collections.Generic 
@using System.Linq 

<Title>GreenScan - Scan Product</Title>

<div class="greenscan-page p-4 max-w-lg mx-auto bg-gray-50 min-h-screen font-sans">
	
    <header class="text-center py-6">
        <h1 class="text-4xl font-extrabold text-green-700 tracking-tight">GreenScan</h1>
        <p class="text-sm text-gray-500 mt-1">QR Code Eco-Friendliness Checker</p>
    </header>

	<p class="text-info text-center text-sm mb-4 text-gray-600">@StatusMessage</p>

    <!-- MANUAL ENTRY BLOCK -->
    <div class="mb-8 p-6 bg-white rounded-xl shadow-lg border border-gray-200">
        <label for="barcodeInput" class="block text-base font-semibold text-gray-700 mb-3 border-b pb-2">Manual Barcode Entry</label>
        
        <input type="text" 
               id="barcodeInput" 
               class="w-full px-4 py-3 border border-gray-300 rounded-lg shadow-inner focus:ring-green-500 focus:border-green-500 text-lg" 
               @bind="ManualBarcode" 
               placeholder="Enter EAN/UPC Code" />
        
        <button @onclick="ProcessManualBarcode" 
                disabled="@(string.IsNullOrWhiteSpace(ManualBarcode) || IsProcessing)"
                class="w-full mt-4 py-3 px-4 text-lg font-bold rounded-lg shadow-md transition duration-150 
                       @(IsProcessing ? "bg-gray-400 text-gray-700" : "bg-green-600 text-white hover:bg-green-700")">
            @if (IsProcessing)
            {
                <span class="animate-spin mr-2">♻️</span>
                
            }
            else
            {
                <span>Check Eco-Score</span>
            }
        </button>
    </div>
    
    <div class="text-center text-gray-500 my-4">--- OR ---</div>


	@if (ProductData == null)
	{
		<div id="scanner-container" 
             class="w-full h-64 bg-gray-900 border-4 border-dashed rounded-xl flex flex-col items-center justify-center overflow-hidden shadow-2xl relative">
            
            @if (string.IsNullOrEmpty(_cameraElementId))
            {
                <button @onclick="StartScannerClick" 
                        class="px-8 py-4 bg-indigo-500 text-white font-bold rounded-full shadow-lg hover:bg-indigo-600 transition duration-200 transform hover:scale-105 z-10">
                    <span class="text-xl">Activate Camera Scan</span>
                </button>
                <div class="absolute inset-0 bg-gray-900 opacity-80 flex items-center justify-center text-gray-300 text-lg">
                    Awaiting Start...
                </div>
            }
        </div>
        <p class="text-center mt-3 text-sm text-gray-500 italic">Tap to start the camera and grant permissions.</p>
	}
	else
	{
		<!-- Display the result card -->
		<div class="result-card p-6 rounded-3xl shadow-xl border-l-8 transition duration-300 transform scale-100 mt-6
                    @(ProductData.EcoScoreColor.ToLower() == "green" ? "bg-green-50 border-green-600" :
                      ProductData.EcoScoreColor.ToLower() == "yellow" ? "bg-yellow-50 border-yellow-600" :
                      "bg-red-50 border-red-600")">
			
            <div class="flex justify-between items-start mb-3">
                <h3 class="text-2xl font-bold text-gray-900 break-words">@ProductData.ProductName</h3>
                <span class="text-xs text-gray-500 bg-gray-200 px-3 py-1 rounded-full">@ProductData.Barcode</span>
            </div>
            
            <div class="text-center py-6 border-y border-gray-300/50 my-4">
                <p class="text-sm font-semibold text-gray-600">Overall Sustainability Score:</p>
                <h1 class="text-7xl font-black mt-2 tracking-tight"
                    style="color: @(ProductData.EcoScoreColor.ToLower() == "green" ? "#065F46" :
                                    ProductData.EcoScoreColor.ToLower() == "yellow" ? "#B45309" :
                                    "#991B1B");">
                    @ProductData.EcoScoreText
                </h1>
            </div>
            
            <p class="text-gray-700 text-sm mt-4 mb-4 font-medium italic">
                <span class="font-bold">Summary:</span> @ProductData.AnalysisSummary
            </p>

            @if (ProductData.VerifiedCertifications.Any())
            {
                <h4 class="font-bold text-base mt-5 mb-2 text-gray-700">Verified Certifications:</h4>
                <ul class="list-disc list-inside text-sm text-gray-600 space-y-1 ml-4">
                    @foreach (var cert in ProductData.VerifiedCertifications)
                    {
                        <li>✅ @cert</li>
                    }
                </ul>
            }

			<button class="w-full mt-10 py-3 px-4 bg-indigo-600 hover:bg-indigo-700 text-white font-bold rounded-xl shadow-lg transform hover:scale-[1.02] transition duration-200" @onclick="RestartScanning">
                Start New Scan
            </button>
		</div>
	}
</div>

@code {
	private string StatusMessage = "Ready to check a product code.";
    private string? _cameraElementId; 
    private string? ManualBarcode; 
    private bool IsProcessing = false; 
	private DotNetObjectReference<Scan>? _dotNetHelper; 

	private EcoScoreResult? ProductData; 

    // Injected Services (Handling ambiguity by removing @inject directives)
    [Inject] public HttpClient Http { get; set; } = default!;
    [Inject] public IJSRuntime JSRuntime { get; set; } = default!;
    [Inject] public NavigationManager NavManager { get; set; } = default!;


	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			_dotNetHelper = DotNetObjectReference.Create(this);
		}
	}

    // Handles click on the manual button
    private async Task ProcessManualBarcode()
    {
        if (string.IsNullOrWhiteSpace(ManualBarcode))
        {
            StatusMessage = "Please enter a barcode number.";
            return;
        }
        
        IsProcessing = true; 
        ProductData = null;
        StateHasChanged(); 
        
        await ProcessBarcode(ManualBarcode.Trim());
        
        IsProcessing = false; 
    }

    // Initiates camera scan on button click
    private async Task StartScannerClick()
    {
        _cameraElementId = "scanner-container";
        StateHasChanged(); // Show the scanner container
        await StartScanner();
    }

	private async Task StartScanner()
	{
		StatusMessage = "Initializing camera and scanning...";
		try
		{
			await JSRuntime.InvokeVoidAsync("BarcodeScanner.initScanner", _dotNetHelper);
		}
		catch (Exception ex)
		{
			StatusMessage = $"Error: Camera access failed. Ensure you are using HTTPS and have granted permission. {ex.Message}";
		}
	}

    // Core logic runner for both manual and camera input
    private async Task ProcessBarcode(string barcode)
    {
        // Stop any running camera before starting API call
        await JSRuntime.InvokeVoidAsync("BarcodeScanner.stopScanner");
        
        StatusMessage = $"Barcode found: {barcode}. Fetching score from server...";
        
        try
        {
            // Calling the server's API Controller
            var result = await Http.GetFromJsonAsync<EcoScoreResult>($"api/greenscan/{barcode}");

            if (result != null)
            {
                ProductData = result;
                StatusMessage = "Analysis Complete!";
            }
            else
            {
                // Fallback 1: Invalid response from a live server 
                ProductData = CreateFallbackResult(barcode, "Invalid server response structure.", "Yellow", "Partial Data");
            }
        }
        catch (HttpRequestException ex)
        {
            // Fallback 2: Server communication failure
            ProductData = CreateFallbackResult(barcode, $"Could not connect to scoring service. Status: {ex.StatusCode}.", "Red", "Connection Failed");
            StatusMessage = $"Server Error: {ex.Message}";
        }
    }


	[JSInvokable]
	public async Task OnBarcodeScanned(string barcode)
	{
        // FIX: The ProcessBarcode method must be AWAITED since it is asynchronous 
        await ProcessBarcode(barcode);
	}

	// Helper function to create a complete EcoScoreResult object for error states
    private EcoScoreResult CreateFallbackResult(string barcode, string summary, string color, string text)
    {
        return new EcoScoreResult
        {
            Barcode = barcode, 
            ProductName = "Error Processing Request", 
            EcoScoreColor = color, 
            EcoScoreText = text, 
            AnalysisSummary = summary, 
            VerifiedCertifications = new List<string>() 
        };
    }

	private void RestartScanning()
	{
        _cameraElementId = null; // Reset the camera state
		ProductData = null;
        ManualBarcode = null; // Clear manual input
		NavManager.NavigateTo("/scan", forceLoad: true);
	}

	public void Dispose()
	{
		_dotNetHelper?.Dispose();
		// Attempt to stop JS scanner if it's running
		JSRuntime.InvokeVoidAsync("BarcodeScanner.stopScanner").AsTask().Wait(); 
	}
}
